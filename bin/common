#!/usr/bin/env bash

LATEST_JDK_VERSION="1.7"

JDK_URL_1_7="https://s3.amazonaws.com/heroku-jvm-langpack-java/openjdk7-u4-heroku-temaki-b20.tar.gz"
JDK_URL_1_6="https://s3.amazonaws.com/heroku-jvm-langpack-java/openjdk6-u25-heroku-temaki-b25.tar.gz"

install_java() {
  baseDir=$1
  if [ ! -d "${baseDir}" ]; then echo "Invalid directory to install java."; return 1 ; fi
  javaVersion="$(get_java_version ${baseDir})"
  jdkDir="${baseDir}"/.jdk
  jdkTarball="${jdkDir}"/jdk.tar.gz
  javaExe="${jdkDir}"/bin/java
  mkdir -p "${jdkDir}"
  if [ ! -f "${jdkTarball}" ] && [ ! -f "${javaExe}" ] || do_java_version_change "${jdkDir}" "${javaVersion}"; then 
    jdkUrl=$(_get_jdk_download_url "${javaVersion}")
    curl --silent --location ${jdkUrl} | tar xz -C "${jdkDir}"
    echo "${javaVersion}" > "${jdkDir}"/version
    if [ ! -f "${javaExe}" ]; then
      echo "Unable to retrieve the JDK."
      return 1
    fi
  fi
  export JAVA_HOME="${jdkDir}"
  export PATH="${jdkDir}/bin:${PATH}"
}

do_java_version_change() {
  jdkDir=$1
  javaVersion=${2:-"${LATEST_JDK_VERSION}"}
  if [ ! -d "${jdkDir}" ]; then echo "Invalid JDK directory."; return 1; fi
  test -f "${jdkDir}/version" && [ "$(cat ${jdkDir}/version)" != "${javaVersion}" ]
}

_get_jdk_download_url() {
  jdkVersion=${1:-${LATEST_JDK_VERSION}}
  # hacky way of parsing the variable name.
  # bash 4 would solve this with associative arrays, but shunit 
  # tests don't seem to respect the correct bash version.
  minorJdkVersion=\$JDK_URL_1_$(expr "${jdkVersion}" : '1.\([6-7]\)')
  jdkUrl=$(eval echo \$JDK_URL_1_${minorJdkVersion})
  echo "${jdkUrl}"
}

get_java_version() {
  pomFile="$(_get_pom_file ${1})"
  utilJar="$(get_jvm_utils_command ${1})"
  pomJvmVersion="$(java -jar ${utilJar} javaversion -pom ${pomFile})" 
  if [ "$(expr "${pomJvmVersion}" : '1.[6-7]')" != 0 ] ; then
    echo "${pomJvmVersion}"
  else
    # default to latest
    echo "${LATEST_JDK_VERSION}"
  fi
}

_get_pom_file() {
  baseDir=${1:-"No Dir"}
  if [ "${baseDir}" == "No Dir" ] || [ ! -d "${baseDir}" ] ; then
    echo "Invalid directory specified for pom file."
    return 1
  fi

  pomFile="${baseDir}/pom.xml"

  if [ -f "${pomFile}" ] ; then
    echo "${pomFile}"
  else
    echo "No pom file specified for maven project."
    return 1
  fi
}

get_jvm_utils_command() {
  baseDir=${1:-"No Dir"}
  if [ "${baseDir}" == "No Dir" ] || [ ! -d "${baseDir}" ] ; then
    echo "Invalid directory specified for pom file."
    return 1
  fi
  
  jvmUtilsDir="${baseDir}"/.jvm-utils
  mkdir -p "${jvmUtilsDir}"
  
  if [ ! -f "$jvmUtilsDir"/jvm-utils.jar ] ; then
    jvmUtilsURL="https://s3.amazonaws.com/heroku-jvm-langpack-java/buildpack-jvm-utils-0.1.jar"
    curl --silent --location ${jvmUtilsURL} --output "${jvmUtilsDir}"/jvm-utils.jar 
  fi

  echo "${jvmUtilsDir}"/jvm-utils.jar
}
